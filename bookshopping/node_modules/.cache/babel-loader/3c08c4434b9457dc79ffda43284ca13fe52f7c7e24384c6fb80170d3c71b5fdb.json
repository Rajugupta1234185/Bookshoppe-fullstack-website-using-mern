{"ast":null,"code":"const handleSubmit = async () => {\n  const {\n    fname,\n    lname,\n    gmail,\n    phone,\n    password,\n    rePassword\n  } = formData;\n\n  // Validate form fields\n  const fnameError = RequiredValidate(fname, 'First Name');\n  const lnameError = RequiredValidate(lname, 'Last Name');\n  const gmailError = GmailValidate(gmail);\n  const phoneError = PhoneValidate(phone);\n  const passwordError = PasswordValidate(password);\n  const rePasswordError = rePasswordValidate(password, rePassword);\n\n  // Check if there are any validation errors\n  if (fnameError || lnameError || gmailError || phoneError || passwordError || rePasswordError) {\n    setMessage(`\n            ${fnameError || ''} \n            ${lnameError || ''} \n            ${gmailError || ''} \n            ${phoneError || ''} \n            ${passwordError || ''} \n            ${rePasswordError || ''}`);\n    setMessageType('error'); // Set the message type to error\n  } else {\n    try {\n      const resforotp = await axios.post('http://localhost:5000/api/sendotp/send-otp', {\n        gmail: formData.gmail\n      });\n\n      // Log response for debugging\n      console.log(resforotp);\n\n      // Check if response is valid and contains 'data'\n      if (resforotp && resforotp.data) {\n        setMessage(resforotp.data.message);\n        setMessageType('success'); // Set the message type to success\n        gotootp();\n      } else {\n        setMessage('Error: No data received from server');\n        setMessageType('error');\n      }\n    } catch (error) {\n      console.error('Error during OTP request:', error);\n      setMessage('Error: Failed to send OTP');\n      setMessageType('error');\n    }\n  }\n};","map":{"version":3,"names":["handleSubmit","fname","lname","gmail","phone","password","rePassword","formData","fnameError","RequiredValidate","lnameError","gmailError","GmailValidate","phoneError","PhoneValidate","passwordError","PasswordValidate","rePasswordError","rePasswordValidate","setMessage","setMessageType","resforotp","axios","post","console","log","data","message","gotootp","error"],"sources":["D:/VS_CODE/bookshopping/src/Signup.jsx"],"sourcesContent":["const handleSubmit = async () => {\r\n    const { fname, lname, gmail, phone, password, rePassword } = formData;\r\n\r\n    // Validate form fields\r\n    const fnameError = RequiredValidate(fname, 'First Name');\r\n    const lnameError = RequiredValidate(lname, 'Last Name');\r\n    const gmailError = GmailValidate(gmail);\r\n    const phoneError = PhoneValidate(phone);\r\n    const passwordError = PasswordValidate(password);\r\n    const rePasswordError = rePasswordValidate(password, rePassword);\r\n\r\n    // Check if there are any validation errors\r\n    if (fnameError || lnameError || gmailError || phoneError || passwordError || rePasswordError) {\r\n        setMessage(`\r\n            ${fnameError || ''} \r\n            ${lnameError || ''} \r\n            ${gmailError || ''} \r\n            ${phoneError || ''} \r\n            ${passwordError || ''} \r\n            ${rePasswordError || ''}`\r\n        );\r\n        setMessageType('error'); // Set the message type to error\r\n    } else {\r\n        try {\r\n            const resforotp = await axios.post('http://localhost:5000/api/sendotp/send-otp', { gmail: formData.gmail });\r\n\r\n            // Log response for debugging\r\n            console.log(resforotp);\r\n\r\n            // Check if response is valid and contains 'data'\r\n            if (resforotp && resforotp.data) {\r\n                setMessage(resforotp.data.message);\r\n                setMessageType('success'); // Set the message type to success\r\n                gotootp();\r\n            } else {\r\n                setMessage('Error: No data received from server');\r\n                setMessageType('error');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during OTP request:', error);\r\n            setMessage('Error: Failed to send OTP');\r\n            setMessageType('error');\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC,KAAK;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGC,QAAQ;;EAErE;EACA,MAAMC,UAAU,GAAGC,gBAAgB,CAACR,KAAK,EAAE,YAAY,CAAC;EACxD,MAAMS,UAAU,GAAGD,gBAAgB,CAACP,KAAK,EAAE,WAAW,CAAC;EACvD,MAAMS,UAAU,GAAGC,aAAa,CAACT,KAAK,CAAC;EACvC,MAAMU,UAAU,GAAGC,aAAa,CAACV,KAAK,CAAC;EACvC,MAAMW,aAAa,GAAGC,gBAAgB,CAACX,QAAQ,CAAC;EAChD,MAAMY,eAAe,GAAGC,kBAAkB,CAACb,QAAQ,EAAEC,UAAU,CAAC;;EAEhE;EACA,IAAIE,UAAU,IAAIE,UAAU,IAAIC,UAAU,IAAIE,UAAU,IAAIE,aAAa,IAAIE,eAAe,EAAE;IAC1FE,UAAU,CAAC;AACnB,cAAcX,UAAU,IAAI,EAAE;AAC9B,cAAcE,UAAU,IAAI,EAAE;AAC9B,cAAcC,UAAU,IAAI,EAAE;AAC9B,cAAcE,UAAU,IAAI,EAAE;AAC9B,cAAcE,aAAa,IAAI,EAAE;AACjC,cAAcE,eAAe,IAAI,EAAE,EAC3B,CAAC;IACDG,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7B,CAAC,MAAM;IACH,IAAI;MACA,MAAMC,SAAS,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,4CAA4C,EAAE;QAAEpB,KAAK,EAAEI,QAAQ,CAACJ;MAAM,CAAC,CAAC;;MAE3G;MACAqB,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;;MAEtB;MACA,IAAIA,SAAS,IAAIA,SAAS,CAACK,IAAI,EAAE;QAC7BP,UAAU,CAACE,SAAS,CAACK,IAAI,CAACC,OAAO,CAAC;QAClCP,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;QAC3BQ,OAAO,CAAC,CAAC;MACb,CAAC,MAAM;QACHT,UAAU,CAAC,qCAAqC,CAAC;QACjDC,cAAc,CAAC,OAAO,CAAC;MAC3B;IACJ,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZL,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDV,UAAU,CAAC,2BAA2B,CAAC;MACvCC,cAAc,CAAC,OAAO,CAAC;IAC3B;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}