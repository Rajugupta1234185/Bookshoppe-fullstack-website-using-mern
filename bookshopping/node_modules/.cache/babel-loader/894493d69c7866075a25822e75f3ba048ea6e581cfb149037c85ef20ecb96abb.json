{"ast":null,"code":"export const RequiredValidate = (value, fieldname) => {\n  if (!value) {\n    return `${fieldname} is required`;\n  } else {\n    return '';\n  }\n};\n_c = RequiredValidate;\nexport const GmailValidate = gmail => {\n  // Check if the Gmail address contains spaces or doesn't end with '@gmail.com'\n  if (gmail.includes(' ') || !gmail.endsWith('@gmail.com')) {\n    return 'Gmail must end with @gmail.com and cannot contain spaces.';\n  }\n  return '';\n};\n_c2 = GmailValidate;\nexport const PhoneValidate = phone => {\n  // Check if the phone contains exactly 10 digits and only digits\n  const phoneAsNumber = Number(phone); // Convert to a number\n\n  if (phone.length === 10 && !isNaN(phoneAsNumber) && /^[0-9]{10}$/.test(phone)) {\n    return ''; // Valid phone number\n  } else {\n    return 'Phone number must be 10 digits and contain only numbers.';\n  }\n};\n_c3 = PhoneValidate;\nexport const PasswordValidate = password => {\n  let errorMessage = '';\n\n  // Check if password length is greater than 8 characters\n  if (password.length <= 8) {\n    errorMessage += 'Password must be longer than 8 characters. ';\n  }\n\n  // Check if password contains at least one number\n  if (!/[0-9]/.test(password)) {\n    errorMessage += 'Password must contain at least one number. ';\n  }\n\n  // Check if password contains at least one special character\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n    errorMessage += 'Password must contain at least one special character (e.g., !, @, #, $, %, etc.). ';\n  }\n\n  // Check if password contains at least one uppercase letter\n  if (!/[A-Z]/.test(password)) {\n    errorMessage += 'Password must contain at least one uppercase letter. ';\n  }\n\n  // Trim and return the final error message\n  return errorMessage.trim() || ''; // If no error message, return empty string\n};\n_c4 = PasswordValidate;\nexport const rePasswordValidate = (password, rePassword) => {\n  if (password !== rePassword) {\n    return 'Password and re-entered password do not match. ';\n  }\n\n  // Trim and return the final error message\n  return ''; // If no error message, return empty string\n};\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"RequiredValidate\");\n$RefreshReg$(_c2, \"GmailValidate\");\n$RefreshReg$(_c3, \"PhoneValidate\");\n$RefreshReg$(_c4, \"PasswordValidate\");","map":{"version":3,"names":["RequiredValidate","value","fieldname","_c","GmailValidate","gmail","includes","endsWith","_c2","PhoneValidate","phone","phoneAsNumber","Number","length","isNaN","test","_c3","PasswordValidate","password","errorMessage","trim","_c4","rePasswordValidate","rePassword","$RefreshReg$"],"sources":["D:/VS_CODE/bookshopping/src/errorhandling.js"],"sourcesContent":["export const RequiredValidate = (value, fieldname) => {\r\n    if (!value) {\r\n      return `${fieldname} is required`;\r\n    } else {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  export const GmailValidate = (gmail) => {\r\n    // Check if the Gmail address contains spaces or doesn't end with '@gmail.com'\r\n    if (gmail.includes(' ') || !gmail.endsWith('@gmail.com')) {\r\n      return 'Gmail must end with @gmail.com and cannot contain spaces.';\r\n    }\r\n    return '';\r\n  };\r\n  \r\n\r\n  export const PhoneValidate = (phone) => {\r\n    // Check if the phone contains exactly 10 digits and only digits\r\n    const phoneAsNumber = Number(phone); // Convert to a number\r\n  \r\n    if (phone.length === 10 && !isNaN(phoneAsNumber) && /^[0-9]{10}$/.test(phone)) {\r\n      return ''; // Valid phone number\r\n    } else {\r\n      return 'Phone number must be 10 digits and contain only numbers.';\r\n    }\r\n  };\r\n\r\n  export const PasswordValidate = (password) => {\r\n    let errorMessage = '';\r\n  \r\n    // Check if password length is greater than 8 characters\r\n    if (password.length <= 8) {\r\n      errorMessage += 'Password must be longer than 8 characters. ';\r\n    }\r\n    \r\n    // Check if password contains at least one number\r\n    if (!/[0-9]/.test(password)) {\r\n      errorMessage += 'Password must contain at least one number. ';\r\n    }\r\n  \r\n    // Check if password contains at least one special character\r\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n      errorMessage += 'Password must contain at least one special character (e.g., !, @, #, $, %, etc.). ';\r\n    }\r\n  \r\n    // Check if password contains at least one uppercase letter\r\n    if (!/[A-Z]/.test(password)) {\r\n      errorMessage += 'Password must contain at least one uppercase letter. ';\r\n    }\r\n  \r\n    // Trim and return the final error message\r\n    return errorMessage.trim() || ''; // If no error message, return empty string\r\n  };\r\n\r\n\r\n  export const rePasswordValidate = (password, rePassword) => {\r\n    if (password !== rePassword) {\r\n        return 'Password and re-entered password do not match. ';\r\n      }\r\n    \r\n      // Trim and return the final error message\r\n      return ''; // If no error message, return empty string\r\n    };\r\n  \r\n  "],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,SAAS,KAAK;EAClD,IAAI,CAACD,KAAK,EAAE;IACV,OAAO,GAAGC,SAAS,cAAc;EACnC,CAAC,MAAM;IACL,OAAO,EAAE;EACX;AACF,CAAC;AAACC,EAAA,GANSH,gBAAgB;AAQ3B,OAAO,MAAMI,aAAa,GAAIC,KAAK,IAAK;EACtC;EACA,IAAIA,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAACD,KAAK,CAACE,QAAQ,CAAC,YAAY,CAAC,EAAE;IACxD,OAAO,2DAA2D;EACpE;EACA,OAAO,EAAE;AACX,CAAC;AAACC,GAAA,GANWJ,aAAa;AAS1B,OAAO,MAAMK,aAAa,GAAIC,KAAK,IAAK;EACtC;EACA,MAAMC,aAAa,GAAGC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;;EAErC,IAAIA,KAAK,CAACG,MAAM,KAAK,EAAE,IAAI,CAACC,KAAK,CAACH,aAAa,CAAC,IAAI,aAAa,CAACI,IAAI,CAACL,KAAK,CAAC,EAAE;IAC7E,OAAO,EAAE,CAAC,CAAC;EACb,CAAC,MAAM;IACL,OAAO,0DAA0D;EACnE;AACF,CAAC;AAACM,GAAA,GATWP,aAAa;AAW1B,OAAO,MAAMQ,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,IAAIC,YAAY,GAAG,EAAE;;EAErB;EACA,IAAID,QAAQ,CAACL,MAAM,IAAI,CAAC,EAAE;IACxBM,YAAY,IAAI,6CAA6C;EAC/D;;EAEA;EACA,IAAI,CAAC,OAAO,CAACJ,IAAI,CAACG,QAAQ,CAAC,EAAE;IAC3BC,YAAY,IAAI,6CAA6C;EAC/D;;EAEA;EACA,IAAI,CAAC,wBAAwB,CAACJ,IAAI,CAACG,QAAQ,CAAC,EAAE;IAC5CC,YAAY,IAAI,oFAAoF;EACtG;;EAEA;EACA,IAAI,CAAC,OAAO,CAACJ,IAAI,CAACG,QAAQ,CAAC,EAAE;IAC3BC,YAAY,IAAI,uDAAuD;EACzE;;EAEA;EACA,OAAOA,YAAY,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AACpC,CAAC;AAACC,GAAA,GAzBWJ,gBAAgB;AA4B7B,OAAO,MAAMK,kBAAkB,GAAGA,CAACJ,QAAQ,EAAEK,UAAU,KAAK;EAC1D,IAAIL,QAAQ,KAAKK,UAAU,EAAE;IACzB,OAAO,iDAAiD;EAC1D;;EAEA;EACA,OAAO,EAAE,CAAC,CAAC;AACb,CAAC;AAAC,IAAApB,EAAA,EAAAK,GAAA,EAAAQ,GAAA,EAAAK,GAAA;AAAAG,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAhB,GAAA;AAAAgB,YAAA,CAAAR,GAAA;AAAAQ,YAAA,CAAAH,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}